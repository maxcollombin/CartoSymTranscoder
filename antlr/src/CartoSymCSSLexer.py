# Generated from antlr/grammars/CartoSymCSSLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
        13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,195,8,30,1,31,1,31,4,31,199,
        8,31,11,31,12,31,200,1,32,4,32,204,8,32,11,32,12,32,205,1,32,1,32,
        4,32,210,8,32,11,32,12,32,211,3,32,214,8,32,3,32,216,8,32,1,32,1,
        32,4,32,220,8,32,11,32,12,32,221,3,32,224,8,32,1,32,1,32,3,32,228,
        8,32,1,32,4,32,231,8,32,11,32,12,32,232,3,32,235,8,32,1,33,1,33,
        1,34,1,34,1,34,3,34,242,8,34,1,35,1,35,1,35,3,35,247,8,35,1,36,1,
        36,5,36,251,8,36,10,36,12,36,254,9,36,1,36,1,36,1,37,1,37,4,37,260,
        8,37,11,37,12,37,261,1,37,1,37,5,37,266,8,37,10,37,12,37,269,9,37,
        1,38,1,38,1,38,1,38,3,38,275,8,38,1,39,1,39,1,40,1,40,1,40,5,40,
        282,8,40,10,40,12,40,285,9,40,1,40,3,40,288,8,40,1,41,1,41,5,41,
        292,8,41,10,41,12,41,295,9,41,1,42,1,42,3,42,299,8,42,1,43,1,43,
        1,44,1,44,1,44,1,44,5,44,307,8,44,10,44,12,44,310,9,44,1,44,1,44,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,321,8,45,10,45,12,45,324,
        9,45,1,45,1,45,1,46,4,46,329,8,46,11,46,12,46,330,1,46,1,46,1,308,
        0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,0,69,
        0,71,0,73,0,75,34,77,0,79,0,81,35,83,0,85,0,87,0,89,36,91,37,93,
        38,1,0,9,3,0,48,57,65,70,97,102,1,0,48,57,2,0,43,43,45,45,10,0,9,
        13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,
        8287,8287,12288,12288,14,0,7,8,33,33,35,38,40,47,58,132,134,159,
        161,5759,5761,8191,8203,8231,8234,8238,8240,8286,8288,12287,12289,
        55295,57344,65533,3,0,48,57,768,879,8255,8256,14,0,65,90,95,95,97,
        122,192,214,216,246,248,767,880,893,895,8190,8204,8205,8304,8591,
        11264,12271,12289,55295,63744,64975,65008,65533,2,0,10,10,13,13,
        3,0,9,10,13,13,32,32,357,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,75,
        1,0,0,0,0,81,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,
        1,0,0,0,3,97,1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,103,1,0,0,0,11,
        105,1,0,0,0,13,107,1,0,0,0,15,109,1,0,0,0,17,111,1,0,0,0,19,113,
        1,0,0,0,21,115,1,0,0,0,23,117,1,0,0,0,25,120,1,0,0,0,27,122,1,0,
        0,0,29,125,1,0,0,0,31,128,1,0,0,0,33,132,1,0,0,0,35,135,1,0,0,0,
        37,140,1,0,0,0,39,148,1,0,0,0,41,150,1,0,0,0,43,152,1,0,0,0,45,156,
        1,0,0,0,47,159,1,0,0,0,49,161,1,0,0,0,51,163,1,0,0,0,53,167,1,0,
        0,0,55,169,1,0,0,0,57,171,1,0,0,0,59,173,1,0,0,0,61,194,1,0,0,0,
        63,196,1,0,0,0,65,223,1,0,0,0,67,236,1,0,0,0,69,241,1,0,0,0,71,246,
        1,0,0,0,73,248,1,0,0,0,75,257,1,0,0,0,77,274,1,0,0,0,79,276,1,0,
        0,0,81,287,1,0,0,0,83,289,1,0,0,0,85,298,1,0,0,0,87,300,1,0,0,0,
        89,302,1,0,0,0,91,316,1,0,0,0,93,328,1,0,0,0,95,96,5,123,0,0,96,
        2,1,0,0,0,97,98,5,125,0,0,98,4,1,0,0,0,99,100,5,46,0,0,100,6,1,0,
        0,0,101,102,5,59,0,0,102,8,1,0,0,0,103,104,5,91,0,0,104,10,1,0,0,
        0,105,106,5,93,0,0,106,12,1,0,0,0,107,108,5,40,0,0,108,14,1,0,0,
        0,109,110,5,41,0,0,110,16,1,0,0,0,111,112,5,44,0,0,112,18,1,0,0,
        0,113,114,5,61,0,0,114,20,1,0,0,0,115,116,5,60,0,0,116,22,1,0,0,
        0,117,118,5,60,0,0,118,119,5,61,0,0,119,24,1,0,0,0,120,121,5,62,
        0,0,121,26,1,0,0,0,122,123,5,62,0,0,123,124,5,61,0,0,124,28,1,0,
        0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,30,1,0,0,0,128,129,5,
        110,0,0,129,130,5,111,0,0,130,131,5,116,0,0,131,32,1,0,0,0,132,133,
        5,105,0,0,133,134,5,115,0,0,134,34,1,0,0,0,135,136,5,108,0,0,136,
        137,5,105,0,0,137,138,5,107,0,0,138,139,5,101,0,0,139,36,1,0,0,0,
        140,141,5,98,0,0,141,142,5,101,0,0,142,143,5,116,0,0,143,144,5,119,
        0,0,144,145,5,101,0,0,145,146,5,101,0,0,146,147,5,110,0,0,147,38,
        1,0,0,0,148,149,5,63,0,0,149,40,1,0,0,0,150,151,5,58,0,0,151,42,
        1,0,0,0,152,153,5,97,0,0,153,154,5,110,0,0,154,155,5,100,0,0,155,
        44,1,0,0,0,156,157,5,111,0,0,157,158,5,114,0,0,158,46,1,0,0,0,159,
        160,5,42,0,0,160,48,1,0,0,0,161,162,5,47,0,0,162,50,1,0,0,0,163,
        164,5,100,0,0,164,165,5,105,0,0,165,166,5,118,0,0,166,52,1,0,0,0,
        167,168,5,37,0,0,168,54,1,0,0,0,169,170,5,94,0,0,170,56,1,0,0,0,
        171,172,5,45,0,0,172,58,1,0,0,0,173,174,5,43,0,0,174,60,1,0,0,0,
        175,176,5,112,0,0,176,195,5,120,0,0,177,195,5,109,0,0,178,179,5,
        102,0,0,179,195,5,116,0,0,180,181,5,112,0,0,181,195,5,99,0,0,182,
        183,5,112,0,0,183,195,5,116,0,0,184,185,5,101,0,0,185,195,5,109,
        0,0,186,187,5,105,0,0,187,188,5,110,0,0,188,189,5,99,0,0,189,195,
        5,104,0,0,190,191,5,99,0,0,191,195,5,109,0,0,192,193,5,109,0,0,193,
        195,5,109,0,0,194,175,1,0,0,0,194,177,1,0,0,0,194,178,1,0,0,0,194,
        180,1,0,0,0,194,182,1,0,0,0,194,184,1,0,0,0,194,186,1,0,0,0,194,
        190,1,0,0,0,194,192,1,0,0,0,195,62,1,0,0,0,196,198,5,35,0,0,197,
        199,7,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,
        201,1,0,0,0,201,64,1,0,0,0,202,204,7,1,0,0,203,202,1,0,0,0,204,205,
        1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,215,1,0,0,0,207,213,
        5,46,0,0,208,210,7,1,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,
        1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,209,1,0,0,0,213,214,
        1,0,0,0,214,216,1,0,0,0,215,207,1,0,0,0,215,216,1,0,0,0,216,224,
        1,0,0,0,217,219,5,46,0,0,218,220,7,1,0,0,219,218,1,0,0,0,220,221,
        1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,203,
        1,0,0,0,223,217,1,0,0,0,224,234,1,0,0,0,225,227,5,69,0,0,226,228,
        7,2,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,
        7,1,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,
        1,0,0,0,233,235,1,0,0,0,234,225,1,0,0,0,234,235,1,0,0,0,235,66,1,
        0,0,0,236,237,7,3,0,0,237,68,1,0,0,0,238,242,3,71,35,0,239,242,5,
        34,0,0,240,242,3,77,38,0,241,238,1,0,0,0,241,239,1,0,0,0,241,240,
        1,0,0,0,242,70,1,0,0,0,243,247,3,79,39,0,244,247,7,1,0,0,245,247,
        3,67,33,0,246,243,1,0,0,0,246,244,1,0,0,0,246,245,1,0,0,0,247,72,
        1,0,0,0,248,252,5,39,0,0,249,251,3,69,34,0,250,249,1,0,0,0,251,254,
        1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,
        1,0,0,0,255,256,5,39,0,0,256,74,1,0,0,0,257,267,3,73,36,0,258,260,
        3,93,46,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,
        1,0,0,0,262,263,1,0,0,0,263,264,3,73,36,0,264,266,1,0,0,0,265,259,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,76,1,
        0,0,0,269,267,1,0,0,0,270,271,5,39,0,0,271,275,5,39,0,0,272,273,
        5,92,0,0,273,275,5,39,0,0,274,270,1,0,0,0,274,272,1,0,0,0,275,78,
        1,0,0,0,276,277,7,4,0,0,277,80,1,0,0,0,278,288,3,83,41,0,279,283,
        5,34,0,0,280,282,3,71,35,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,
        1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,288,
        5,34,0,0,287,278,1,0,0,0,287,279,1,0,0,0,288,82,1,0,0,0,289,293,
        3,87,43,0,290,292,3,85,42,0,291,290,1,0,0,0,292,295,1,0,0,0,293,
        291,1,0,0,0,293,294,1,0,0,0,294,84,1,0,0,0,295,293,1,0,0,0,296,299,
        3,87,43,0,297,299,7,5,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,86,
        1,0,0,0,300,301,7,6,0,0,301,88,1,0,0,0,302,303,5,47,0,0,303,304,
        5,42,0,0,304,308,1,0,0,0,305,307,9,0,0,0,306,305,1,0,0,0,307,310,
        1,0,0,0,308,309,1,0,0,0,308,306,1,0,0,0,309,311,1,0,0,0,310,308,
        1,0,0,0,311,312,5,42,0,0,312,313,5,47,0,0,313,314,1,0,0,0,314,315,
        6,44,0,0,315,90,1,0,0,0,316,317,5,47,0,0,317,318,5,47,0,0,318,322,
        1,0,0,0,319,321,8,7,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,
        1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,
        6,45,0,0,326,92,1,0,0,0,327,329,7,8,0,0,328,327,1,0,0,0,329,330,
        1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,
        6,46,1,0,333,94,1,0,0,0,26,0,194,198,200,205,211,213,215,221,223,
        227,232,234,241,246,252,261,267,274,283,287,293,298,308,322,330,
        2,0,3,0,0,2,0
    ]

class CartoSymCSSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 2
    COMMENTS = 3

    LCBR = 1
    RCBR = 2
    DOT = 3
    SEMI = 4
    LSBR = 5
    RSBR = 6
    LPAR = 7
    RPAR = 8
    COMMA = 9
    EQ = 10
    LT = 11
    LTEQ = 12
    GT = 13
    GTEQ = 14
    IN = 15
    NOT = 16
    IS = 17
    LIKE = 18
    BETWEEN = 19
    QUESTION = 20
    COLON = 21
    AND = 22
    OR = 23
    MUL = 24
    DIV = 25
    IDIV = 26
    MOD = 27
    POW = 28
    MINUS = 29
    PLUS = 30
    UNIT = 31
    HEX_LITERAL = 32
    NUMERIC_LITERAL = 33
    CHARACTER_LITERAL = 34
    IDENTIFIER = 35
    COMMENT = 36
    LINE_COMMENT = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"WHITESPACE", 
                                                          u"COMMENTS" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'.'", "';'", "'['", "']'", "'('", "')'", "','", 
            "'='", "'<'", "'<='", "'>'", "'>='", "'in'", "'not'", "'is'", 
            "'like'", "'between'", "'?'", "':'", "'and'", "'or'", "'*'", 
            "'/'", "'div'", "'%'", "'^'", "'-'", "'+'" ]

    symbolicNames = [ "<INVALID>",
            "LCBR", "RCBR", "DOT", "SEMI", "LSBR", "RSBR", "LPAR", "RPAR", 
            "COMMA", "EQ", "LT", "LTEQ", "GT", "GTEQ", "IN", "NOT", "IS", 
            "LIKE", "BETWEEN", "QUESTION", "COLON", "AND", "OR", "MUL", 
            "DIV", "IDIV", "MOD", "POW", "MINUS", "PLUS", "UNIT", "HEX_LITERAL", 
            "NUMERIC_LITERAL", "CHARACTER_LITERAL", "IDENTIFIER", "COMMENT", 
            "LINE_COMMENT", "WS" ]

    ruleNames = [ "LCBR", "RCBR", "DOT", "SEMI", "LSBR", "RSBR", "LPAR", 
                  "RPAR", "COMMA", "EQ", "LT", "LTEQ", "GT", "GTEQ", "IN", 
                  "NOT", "IS", "LIKE", "BETWEEN", "QUESTION", "COLON", "AND", 
                  "OR", "MUL", "DIV", "IDIV", "MOD", "POW", "MINUS", "PLUS", 
                  "UNIT", "HEX_LITERAL", "NUMERIC_LITERAL", "WHITESPACE", 
                  "CHARACTER", "CHARACTER_NODLBQUOTE", "CHARACTER_LITERAL_PART", 
                  "CHARACTER_LITERAL", "ESCAPED_QUOTE", "ALPHA_NODBLQUOTE", 
                  "IDENTIFIER", "UNQUOTED_IDENTIFIER", "IDENTIFIER_PART", 
                  "IDENTIFIER_START", "COMMENT", "LINE_COMMENT", "WS" ]

    grammarFileName = "CartoSymCSSLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


